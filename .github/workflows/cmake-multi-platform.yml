# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build XC Reader for multi platforms.


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        arch: [ x86_64, aarch64 ]
        build_type: [ Release ]
        c_compiler: [ clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            arch: aarch64
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            arch: aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo  >> $GITHUB_ENV

      - name: Configure Compiler
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt install gcc-aarch64-linux-gnu
          echo -e \\nset\(CMAKE_C_FLAGS "--target=${{ matrix.arch }}-linux-gnu"\) \\n >> ${{ github.workspace }}/CMakeLists.txt

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build Patcher.
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target xcreader

      - name: Upload Windows x64 Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'x86_64' && matrix.os == 'windows-latest' }}
        with:
          name: XCReader-Windows-x64
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**/xcreader.exe

      - name: Upload Linux x64 Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'x86_64' && matrix.os == 'ubuntu-latest' }}
        with:
          name: XCReader-Linux-x64
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/xcreader

      - name: Upload MacOS x64 Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'x86_64' && matrix.os == 'macos-latest' }}
        with:
          name: XCReader-MacOS-x64
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/xcreader

      - name: Upload Linux arm64 Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'aarch64' && matrix.os == 'ubuntu-latest' }}
        with:
          name: XCReader-Linux-arm64
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/xcreader
